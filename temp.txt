Option Explicit

Dim RC As Variant   ' to make 2D array from various resource-specific arrays

Sub ReContour()
 Dim taskType As String
 Dim tsvContour As Variant   ' array of daily hours for particular resource
 Dim dtSt As Date
 Dim dtEnd As Date
 Dim TSV As TimeScaleValues
 Dim t As Task
 Dim Asgn As Assignment
 Dim tse
 Dim i As Integer
 Dim hrs As Integer
    
    If MsgBox("confirm VB code edited to set correct task codes and contours!", vbOKCancel + vbDefaultButton2) = vbCancel Then Exit Sub
    taskType = "50.8.1"
    Call R80contour    'sets contour to R80 profile
    ' AE=2, AV=3, AS=4, LS=5, NDI=6, SF=8, DM=9, MOD=10
    For Each t In ActiveProject.Tasks
        If t.WBS Like "*" & taskType Then
        'If Mid(t.WBS, 4, Len(taskType)) = taskType Then
            dtSt = t.Start
            dtEnd = t.Finish
            For Each Asgn In t.Assignments
                Debug.Print t.Name, t.WBS, Asgn.Resource, Asgn.ResourceID, Asgn.ResourceName, Asgn.ResourceUniqueID
                Set TSV = Asgn.TimeScaleData(dtSt, dtEnd, TimescaleUnit:=tsB)
                tsvContour = RC(Asgn.ResourceUniqueID)
                If t.Duration / 480 <> UBound(tsvContour) + 1 Then MsgBox "current task has different length than standard task", , t.WBS & " " & t.Name
                i = 0
                For Each tse In TSV
                    If Asgn.Finish <> t.Finish Then Asgn.Finish = t.Finish
                    If ActiveProject.Calendar.Period(tse.StartDate).Working Then
                        If VarType(tsvContour) = vbInteger Then
                            Stop  ' should all be arrays
                        ElseIf VarType(tsvContour) = vbArray Or VarType(tsvContour) = 8204 Then
                            'arays are evaluating as 8204 insttead of vbArray
                            If VarType(tsvContour) = vbArray Then MsgBox "=vbArray"
                            hrs = tsvContour(i)
                            If hrs = 0 Then hrs = 1 / 60      'enter at least 1  minute to keep start and finish dates in sync with task
                        Else
                            MsgBox "unexpected data type"
                            Stop
                        End If
                        If tse.Value = "" Then Stop
                        Asgn.Finish = t.Finish
                        If tse.Value <> hrs * wuCF Then
                            Debug.Print tse.StartDate & " current hours=" & tse.Value / wuCF & ", new hours=" & hrs & " asgn.hrs=" & Asgn.Work / 60
                            tse.Value = hrs * wuCF   ' work unit conversion factor (eg. hours to minutes)
                        End If
                        i = i + 1
                    End If
                Next tse
            Next Asgn
        End If
    Next t
    MsgBox "Contour update completed (task like " & taskType & ")"
End Sub


Sub R80contour()
 Dim rAE As Variant
 Dim rAV As Variant
 Dim rAS As Variant
 Dim rLS As Variant
 Dim rNDI As Variant
 Dim rSF As Variant
 Dim BAY As Variant   ' to make array of 8hrs per day for DM or MOD resources
 Dim i As Integer
 
 rAE = Array(40, 40, 40, 40, 40, 80, 80, 80, 80, 80, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 100, 100, 100, 100, 100, 80, _
               80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 100, 100, 100, 100, 100, 120, _
               120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, 140, _
               140, 140, 140, 140, 140, 124, 124, 124, 124, 124, 108, 108, 108, 108, 108, 92, 92, 92, 92, 92, 76, 76, 76, 76, 76, 60, 60, 60, 60, 60, 44, 44, _
               44, 44, 44, 28, 28, 28, 28, 28, 12, 12, 12, 12, 12)
 rAV = Array(6, 6, 6, 6, 6, 10, 10, 10, 10, 10, 14, 14, 14, 14, 14, 18, 18, 18, 18, 18, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, _
               22, 22, 22, 22, 22, 22, 22, 26, 26, 26, 26, 26, 30, 30, 30, 30, 30, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, _
               34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 26, 26, _
               26, 26, 26, 18, 18, 18, 18, 18, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 8, 8, 8, 8, 8)
 rAS = Array(5, 5, 5, 5, 5, 46, 46, 46, 46, 46, 92, 92, 92, 92, 92, 138, 138, 138, 138, 138, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 166, 142, 142, 142, 142, 142, 118, 118, 118, 118, 118, 94, 94, 94, 94, 94, 76, 76, 76, 76, 76, 58, 58, 58, 58, 58, 40, 40, 40, 40, 40, 22, 22, 22, 22, 22, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8)
 rLS = Array(4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 6, 6, 6, 6, 6, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 5, 5, 5, 5, 5)
 rNDI = Array(5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 6, 6, 6, 6, 6, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 7, 7, 7, 7, 7, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 5, 5, 5, 5, 5)
 rSF = Array(2, 2, 2, 2, 2, 6, 6, 6, 6, 6, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 14, 14, 14, 14, 14, 15, 15, 15, 15, 15, 16, 16, 16, 16, 16, 17, 17, 17, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 14, 14, 14, 14, 14, 10, 10, 10, 10, 10, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 5, 5, 5, 5, 5)
 ReDim BAY(UBound(rAE))
 For i = 0 To UBound(rAE)
    BAY(i) = 8
 Next i
 ' AE=2, AV=3, AS=4, LS=5, NDI=6, SF=8, DM=9, MOD=10
 RC = Array(0, 0, rAE, rAV, rAS, rLS, rNDI, 0, rSF, BAY, BAY)
End Sub

Sub R30contour()
 Dim rAE As Variant
 Dim rAV As Variant
 Dim rAS As Variant
 Dim BAY As Variant   ' to make array of 8hrs per day for DM or MOD resources
 Dim i As Integer
 
 rAE = Array(88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 70, _
               70, 70, 70, 70, 52, 52, 52, 52, 52, 34, 34, 34, 34, 34)
 rAV = Array(5, 5, 5, 5, 5, 10, 10, 10, 10, 10, 15, 15, 15, 15, 15, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, _
               24, 24, 24, 18, 18, 18, 18, 18, 12, 12, 12, 12, 12)
 rAS = Array(8, 8, 8, 8, 8, 14, 14, 14, 14, 14, 20, 20, 20, 20, 20, 26, 26, 26, 26, 26, 32, 32, 32, 32, 32, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 28, 28, _
               28, 28, 28, 18, 18, 18, 18, 18, 8, 8, 8, 8, 8)
 ReDim BAY(UBound(rAE))
 For i = 0 To UBound(rAE)
    BAY(i) = 8
 Next i
 ' AE=2, AV=3, AS=4, LS=5, NDI=6, SF=8, DM=9, MOD=10
 RC = Array(0, 0, rAE, rAV, rAS, "LS", "NDI", 0, "SF", BAY, BAY)
End Sub

Sub R20contour()
 Dim rAE As Variant
 Dim rAV As Variant
 Dim rAS As Variant
 Dim BAY As Variant   ' to make array of 8hrs per day for DM or MOD resources
 Dim i As Integer
 
 rAE = Array(39, 39, 39, 39, 39, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 56, 56, 56, 56, 56, 34, 34, 34, 34, 34, 1, 1, 1, 1, 1)
 rAV = Array(6, 6, 6, 6, 6, 16, 16, 16, 16, 16, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 27, 27, 27, 27, 27, 4, 4, 4, 4, 4)
 rAS = Array(7, 7, 7, 7, 7, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 13, 13, 13, 13, 13, 2, 2, 2, 2, 2)
 ReDim BAY(UBound(rAE))
 For i = 0 To UBound(rAE)
    BAY(i) = 8
 Next i
 ' AE=2, AV=3, AS=4, LS=5, NDI=6, SF=8, DM=9, MOD=10
 RC = Array(0, 0, rAE, rAV, rAS, "LS", "NDI", 0, "SF", BAY, BAY)
End Sub

Sub createArrayString()
 'create array from DAILY WORK data (in HOURS) in column format in the active workbook
  Dim xlBook As Excel.Workbook
  Dim xlSheet As Excel.Worksheet
  Dim ac As Excel.Range
  Dim arrStr As String
    Set xlBook = GetObject("\\eiprmfile\groups\C130J-ILS\Analytics\FP\ServicingHours.xlsx")
    Set xlSheet = xlBook.ActiveSheet
    Set ac = xlSheet.Application.ActiveCell
    Do While ac <> ""
        arrStr = arrStr & ac & ", " & ac & ", " & ac & ", " & ac & ", " & ac & ", "
        Set ac = ac(2)
    Loop
    arrStr = Left(arrStr, Len(arrStr) - 2)
    MsgBox arrStr & vbCrLf & vbCrLf & "available for copying from Immediate (Debug) window"
    Debug.Print arrStr
End Sub



modToCSV
' Evolved from code at https://stackoverflow.com/questions/9380117/how-to-copy-tasks-data-from-microsoft-project-plan-to-excel (Copyright Jack Dahlgren, Feb 2002)

Option Explicit
Dim FilePath As String

Public Const MinutesPerDay = 480
Public Const tsB = pjTimescaleDays   'Time Scale Units or Buckets
Public Const wuCF = 60      ' work unit conversion factor (divisor): 1 for minutes, 60 for hours, 480 for days, etc .....
Dim dtSt As Date
Dim dtEnd As Date

Sub exportData()
    dtSt = CDate("1-Nov-17")
    dtEnd = CDate("31-Dec-19")
    Call exportTasks
    Call exportResourceUsage(ActiveSelection.Tasks)
    MsgBox ("Export complete")
End Sub

Sub exportTasks()
    Dim t As Task
    Dim Asgn As Assignment
    Dim Tcount As Integer
    Dim taskData As String
    Dim asgnData As String
    Dim taskOnly As Boolean
    
    'Open text file for output (from http://www.homeandlearn.org/write_to_a_text_file.html)
    FilePath = "G:\C130J-ILS\Analytics\FP\FP_Tasks.csv"
    Open FilePath For Output As #1
    'If you want the new contents to be added to the end of your file then you would use Append instead of Output
    
    'label Columns
    Print #1, "Level,OutlineNumber,WBS,Name,TUID,Hours,Duration,Start,Finish,Type,Calendar,CType,ConstraintDate,%Cmpl,Index,AUID,A.Name,A.Work"
    'Use Print instead of Write (which sends with opening and closing "")
    
    Tcount = 0
    For Each t In ActiveProject.Tasks
        If Not t Is Nothing Then
            taskData = taskDetails(t)
            taskOnly = True
            For Each Asgn In t.Assignments
                taskOnly = False    'indicates an assignment was found, in which case task will be written to file with assignment data
                asgnData = Asgn.UniqueID
                asgnData = asgnData & "," & Asgn.ResourceName
                asgnData = asgnData & "," & Asgn.Work / wuCF
                Print #1, taskData & "," & asgnData
            Next Asgn
            'If no assignments for the task, has not yet been ritten to file, so need to write just the task data:
            If taskOnly Then Print #1, taskData
        End If
    Next t
    
    Close #1
End Sub


Sub exportResourceUsage(Optional taskFilter As Tasks)
 'first define our variables
 Dim r As Resource
 Dim rs As Resources
 Dim TSV As TimeScaleValues
 Dim pTSV As TimeScaleValues
 Dim i As Long, j As Long
 Dim t As Task
 Dim x As TimeScaleValue
 Dim Asgn As Assignment
 Dim Tcount As Integer
 Dim taskData As String
 Dim asgnData As String
 Dim taskOnly As Boolean
 Dim tse

'Application.ShowAssignmentUnitsAs = pjDecimalAssignmentUnits

    'Open text file for output (from http://www.homeandlearn.org/write_to_a_text_file.html)
    FilePath = "G:\C130J-ILS\Analytics\FP\FP_Usage.csv"
    If taskFilter.Count > 0 Then
        Open FilePath For Append As #1
    Else
        Open FilePath For Output As #1      'If you want the new contents to be added to the end of your file then you would use Append instead of Output
        'label Columns
        Print #1, "AUID,Res,TUID,WBS,Start,Finish,Hours,Ppl"
    End If
    If taskFilter.Count = 0 Then Set taskFilter = ActiveProject.Tasks
    For Each t In taskFilter
        If Not t Is Nothing Then
            taskOnly = True
            For Each Asgn In t.Assignments
                Set TSV = Asgn.TimeScaleData(dtSt, dtEnd, TimescaleUnit:=tsB)
                For Each tse In TSV
                    If tse.Value > "" And ActiveProject.Calendar.Period(tse.StartDate).Working Then
                        asgnData = Asgn.UniqueID
                        asgnData = asgnData & "," & Asgn.ResourceName
                        asgnData = asgnData & "," & t.UniqueID
                        asgnData = asgnData & "," & t.WBS
                        asgnData = asgnData & "," & tse.StartDate
                        asgnData = asgnData & "," & tse.EndDate
                        asgnData = asgnData & "," & tse.Value / wuCF
                        asgnData = asgnData & "," & tse.Value / MinutesPerDay   'Convert to number of People required
                        Print #1, asgnData
                    End If
                Next tse
            Next Asgn
        End If
    Next t
    
    Close #1
End Sub


Function taskDetails(t As Task) As String
 Dim x As String
    taskDetails = t.OutlineLevel
    taskDetails = taskDetails & "," & t.OutlineNumber
    taskDetails = taskDetails & "," & t.WBS
    taskDetails = taskDetails & "," & t.Name
    taskDetails = taskDetails & "," & t.UniqueID
    taskDetails = taskDetails & "," & t.Work / wuCF
    taskDetails = taskDetails & "," & t.Duration / MinutesPerDay    ' convert minutes to days
    taskDetails = taskDetails & "," & t.Start
    taskDetails = taskDetails & "," & t.Finish
    taskDetails = taskDetails & "," & t.Type
    taskDetails = taskDetails & "," & t.Calendar
    taskDetails = taskDetails & "," & t.ConstraintType
    If t.ConstraintDate = "NA" Then x = "" Else x = t.ConstraintDate
    taskDetails = taskDetails & "," & x
    taskDetails = taskDetails & "," & t.PercentComplete
    taskDetails = taskDetails & "," & t.Index
End Function




